/*
  These are some examples how to use operations to enable, disable, switch, and get a range of bits from a type variable.
*/

        int get_bit(char input, int pos)
        {
            return (input >> pos) & 0x01;
        }

        int get_bit_range(char input, int start, int len)
        {
            return (input >> start) & ((1 << len)-1);
        }
        
        
/*
  Here we will go more in depth on how to utilize such operators.
  
  In the following we will use the version of operators adding on to the previous type variable.
  
  Example:
  
  char a = 1;
  char b = 0;
  a = a ^ b;
  
  becomes:
  
  a ^= b;
*/

//lets say we have a field of data (we'll use 8 bits in this example)
char settings = 0xB3;

//we will be using these boolean values for each bit in the settings.
char enabled = (1 << 7);
char dev = (1 << 6);
char init = (1 << 5);
char autoexec = (1 << 4);
char external = (1 << 3);
char user = (1 << 2);
char server = (1 << 1);
char system = (1 << 0);

/*
  thus, settings hold these values:
  
  * enabled      = 1
  * dev          = 0
  * init         = 1
  * autoexec     = 1
  * external     = 0
  * user         = 0
  * server       = 1
  * system       = 1
*/

//We can enable settings in the bit field by the following:
settings |= dev; //this will enable the dev bit in the settings char type.

//We can also disable bits in the bit field by the following:
settings &= ~init; //this will disable the init bit in the settings variable (note: may need to cast not value)

//We can also toggle values, this can be achieve with 'xor', or 'exclusive or'
settings ^= init; //this will toggle init bit based on it's previous value.
